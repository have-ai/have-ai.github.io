import{_ as a,c as l,o as s,ag as e}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"智能体系统架构设计文档","description":"","frontmatter":{},"headers":[],"relativePath":"shared/agentdesign.md","filePath":"shared/agentdesign.md"}'),n={name:"shared/agentdesign.md"};function t(r,i,h,o,p,d){return s(),l("div",null,i[0]||(i[0]=[e(`<h1 id="智能体系统架构设计文档" tabindex="-1">智能体系统架构设计文档 <a class="header-anchor" href="#智能体系统架构设计文档" aria-label="Permalink to &quot;智能体系统架构设计文档&quot;">​</a></h1><h2 id="_1-系统架构图" tabindex="-1">1. 系统架构图 <a class="header-anchor" href="#_1-系统架构图" aria-label="Permalink to &quot;1. 系统架构图&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[前端Vue3] --&gt;|HTTP/WS| B[后端Go服务]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|gRPC| C[核心引擎]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[(PostgreSQL)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; E[(Redis)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; F[Prometheus]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt; G[Grafana]</span></span></code></pre></div><h2 id="_2-核心组件说明" tabindex="-1">2. 核心组件说明 <a class="header-anchor" href="#_2-核心组件说明" aria-label="Permalink to &quot;2. 核心组件说明&quot;">​</a></h2><h3 id="_2-1-前端架构" tabindex="-1">2.1 前端架构 <a class="header-anchor" href="#_2-1-前端架构" aria-label="Permalink to &quot;2.1 前端架构&quot;">​</a></h3><ul><li><strong>技术栈</strong>: <ul><li>Vue3 + Composition API</li><li>Pinia状态管理</li><li>Element Plus UI组件</li><li>Vite构建工具</li></ul></li><li><strong>关键特性</strong>: <ul><li>WebSocket封装为Composable</li><li>自适应布局(PC/移动端)</li><li>国际化支持(i18n)</li><li>主题切换功能</li></ul></li></ul><h3 id="_2-2-后端架构" tabindex="-1">2.2 后端架构 <a class="header-anchor" href="#_2-2-后端架构" aria-label="Permalink to &quot;2.2 后端架构&quot;">​</a></h3><ul><li><strong>核心模块</strong>: <ul><li>API网关: <ul><li>Gin路由分组</li><li>JWT认证中间件</li><li>请求限流(令牌桶)</li></ul></li><li>智能体引擎: <ul><li>任务优先级队列</li><li>上下文记忆管理</li><li>插件热加载</li></ul></li><li>监控系统: <ul><li>Prometheus指标采集</li><li>健康检查端点</li><li>性能分析(pprof)</li></ul></li></ul></li></ul><h3 id="_2-3-数据层" tabindex="-1">2.3 数据层 <a class="header-anchor" href="#_2-3-数据层" aria-label="Permalink to &quot;2.3 数据层&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    class MemorySystem {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        +ShortTermMemory : LRU缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        +LongTermMemory : 向量数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        +SaveContext() : 异步持久化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        +RecallMemory() : 语义检索</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MemorySystem --&gt; PostgreSQL: 结构化数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MemorySystem --&gt; Redis: 缓存/会话</span></span></code></pre></div><h2 id="_3-部署架构" tabindex="-1">3. 部署架构 <a class="header-anchor" href="#_3-部署架构" aria-label="Permalink to &quot;3. 部署架构&quot;">​</a></h2><h3 id="_3-1-生产环境" tabindex="-1">3.1 生产环境 <a class="header-anchor" href="#_3-1-生产环境" aria-label="Permalink to &quot;3.1 生产环境&quot;">​</a></h3><ul><li><strong>容器编排</strong>: <ul><li>多副本部署(3+实例)</li><li>滚动更新策略</li><li>HPA自动扩缩容</li></ul></li><li><strong>网络拓扑</strong>: <ul><li>Nginx入口负载均衡</li><li>内部服务网格</li><li>安全组隔离</li></ul></li></ul><h2 id="_4-性能优化" tabindex="-1">4. 性能优化 <a class="header-anchor" href="#_4-性能优化" aria-label="Permalink to &quot;4. 性能优化&quot;">​</a></h2><ul><li><strong>数据库</strong>: <ul><li>读写分离配置</li><li>连接池优化(80/20规则)</li><li>查询缓存策略</li></ul></li><li><strong>缓存</strong>: <ul><li>多级缓存架构</li><li>热点数据预加载</li><li>失效策略优化</li></ul></li></ul><h2 id="_5-安全设计" tabindex="-1">5. 安全设计 <a class="header-anchor" href="#_5-安全设计" aria-label="Permalink to &quot;5. 安全设计&quot;">​</a></h2><ul><li>传输层: TLS 1.3加密</li><li>认证: OAuth2.0 + JWT</li><li>审计: 操作日志记录</li><li>防护: WAF集成</li></ul><h2 id="_6-扩展性设计" tabindex="-1">6. 扩展性设计 <a class="header-anchor" href="#_6-扩展性设计" aria-label="Permalink to &quot;6. 扩展性设计&quot;">​</a></h2><ul><li>插件接口规范</li><li>横向扩展方案</li><li>消息队列集成(Kafka)</li><li>服务网格支持</li></ul>`,19)]))}const k=a(n,[["render",t]]);export{c as __pageData,k as default};
