import{_ as s,c as n,o as l,ag as i}from"./chunks/framework.DPDPlp3K.js";const p="/assets/image-20250530115843626.BKtAM9ee.png",u=JSON.parse('{"title":"大模型浪潮下怎么写程序","description":"","frontmatter":{},"headers":[],"relativePath":"shared/aicoding.md","filePath":"shared/aicoding.md"}'),e={name:"shared/aicoding.md"};function t(o,a,r,c,h,g){return l(),n("div",null,a[0]||(a[0]=[i(`<h1 id="大模型浪潮下怎么写程序" tabindex="-1">大模型浪潮下怎么写程序 <a class="header-anchor" href="#大模型浪潮下怎么写程序" aria-label="Permalink to &quot;大模型浪潮下怎么写程序&quot;">​</a></h1><p>AI编程已形成浪潮，学习一门新的语言，如果没有应用大模型总会缺点什么，用了大模型又能多点什么，我这里且试试。</p><h2 id="由浅入深之问" tabindex="-1">由浅入深之问 <a class="header-anchor" href="#由浅入深之问" aria-label="Permalink to &quot;由浅入深之问&quot;">​</a></h2><h3 id="q1-你是一个go的系统架构师-想开始开发一个智能体-需要怎样的架构。" tabindex="-1">Q1：你是一个go的系统架构师，想开始开发一个智能体，需要怎样的架构。 <a class="header-anchor" href="#q1-你是一个go的系统架构师-想开始开发一个智能体-需要怎样的架构。" aria-label="Permalink to &quot;Q1：你是一个go的系统架构师，想开始开发一个智能体，需要怎样的架构。&quot;">​</a></h3><p><strong>A</strong>：智能体系统需要模块化设计，核心组件包括：</p><ul><li>通信层(HTTP/gRPC)</li><li>任务调度引擎</li><li>记忆/知识管理</li><li>插件/技能系统</li><li>监控和日志</li></ul><p>建议采用分层架构，便于扩展和维护，我将为智能体系统设计以下Go架构：</p><p>目录结构：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/agent</span></span>
<span class="line"><span>  /cmd</span></span>
<span class="line"><span>    main.go          # 入口文件</span></span>
<span class="line"><span>  /internal</span></span>
<span class="line"><span>    /core            # 核心逻辑</span></span>
<span class="line"><span>      agent.go       # 智能体主逻辑</span></span>
<span class="line"><span>      engine.go      # 任务引擎</span></span>
<span class="line"><span>    /memory          # 记忆系统</span></span>
<span class="line"><span>      short_term.go  # 短期记忆</span></span>
<span class="line"><span>      long_term.go   # 长期记忆</span></span>
<span class="line"><span>    /api             # 接口层</span></span>
<span class="line"><span>      rest.go        # REST API</span></span>
<span class="line"><span>      grpc.go        # gRPC接口</span></span>
<span class="line"><span>    /plugins         # 插件系统</span></span>
<span class="line"><span>      manager.go     # 插件管理</span></span>
<span class="line"><span>    /config          # 配置管理</span></span>
<span class="line"><span>      config.go</span></span>
<span class="line"><span>  /pkg</span></span>
<span class="line"><span>    /logger          # 日志系统</span></span>
<span class="line"><span>    /monitoring      # 监控指标</span></span>
<span class="line"><span>  go.mod            # 依赖管理</span></span></code></pre></div><p>核心模块设计：</p><ul><li><code>Agent</code> 结构体: 智能体核心，协调各模块</li><li><code>Engine</code>: 负责任务调度和执行</li><li><code>MemorySystem</code>: 管理短期/长期记忆</li><li><code>PluginSystem</code>: 动态加载技能插件</li><li><code>APIServer</code>: 提供外部访问接口</li></ul><p>关键技术选型建议：</p><ul><li>通信: gRPC + REST双协议</li><li>并发: goroutine + channel模式</li><li>持久化: 可选用SQLite或Redis</li><li>配置: Viper库管理配置</li><li>日志: Zap高性能日志库</li></ul><hr><p>以上回答，确实周到，Deepseek-V3有些给力，比我会思考，接着提问。</p><h3 id="q2-持久化换成postgresql" tabindex="-1">Q2：持久化换成postgresql <a class="header-anchor" href="#q2-持久化换成postgresql" aria-label="Permalink to &quot;Q2：持久化换成postgresql&quot;">​</a></h3><p><strong>A</strong>：已更新智能体架构设计，主要变更：</p><ol><li>持久化层改用PostgreSQL</li><li>新增database目录结构： /internal /database postgres.go # PG连接池和CRUD操作 migrations/ # 数据库迁移脚本</li><li>推荐使用pgx驱动替代lib/pq</li><li>示例go.mod依赖项： github.com/jackc/pgx/v5 github.com/golang-migrate/migrate/v4</li></ol><hr><p>这次回答没什么惊喜，也没猜测笔者修改的意图，继续提问。</p><h3 id="q3-增加对应的web页面-实现智能体的用户对话交互范式" tabindex="-1">Q3：增加对应的web页面，实现智能体的用户对话交互范式 <a class="header-anchor" href="#q3-增加对应的web页面-实现智能体的用户对话交互范式" aria-label="Permalink to &quot;Q3：增加对应的web页面，实现智能体的用户对话交互范式&quot;">​</a></h3><p><strong>A</strong>：更新后的全栈架构方案：</p><ol><li>新增前端目录： /web /public /src /components # React组件 /pages # 页面路由 /services # API调用 App.js index.js</li><li>后端增强：</li></ol><ul><li>新增/chat HTTP路由</li><li>添加WebSocket支持</li><li>会话状态管理</li></ul><p>技术栈推荐：</p><ul><li>前端: React + TailwindCSS</li><li>实时通信: Gorilla WebSocket</li><li>状态管理: Redux</li></ul><p>完整交互流程： 前端 &lt;-&gt; WebSocket &lt;-&gt; 智能体核心 &lt;-&gt; PostgreSQL</p><hr><p>基本问答，没有特别的，继续。</p><h3 id="q4-前端技术栈使用vue3" tabindex="-1">Q4：前端技术栈使用vue3 <a class="header-anchor" href="#q4-前端技术栈使用vue3" aria-label="Permalink to &quot;Q4：前端技术栈使用vue3&quot;">​</a></h3><p><strong>A</strong>：更新后的前端架构方案：</p><p>技术栈调整：</p><ul><li>框架: Vue 3 + Composition API</li><li>状态管理: Pinia</li><li>UI组件: Element Plus</li><li>构建工具: Vite</li></ul><p>目录结构调整： /web /src /assets /components /composables # Vue3组合式函数 /stores # Pinia状态管理 /views # 页面组件 App.vue main.js</p><p>关键实现点：</p><ul><li>使用语法</li><li>WebSocket封装为Vue composable</li><li>对话历史管理使用Pinia</li></ul><p>示例依赖项(package.json): &quot;vue&quot;: &quot;^3.3.0&quot;, &quot;pinia&quot;: &quot;^2.1.0&quot;, &quot;element-plus&quot;: &quot;^2.3.0&quot;</p><hr><p>没什么新意了，小结以下吧。</p><h3 id="q5-总结下整体架构和代码目录" tabindex="-1">Q5：总结下整体架构和代码目录 <a class="header-anchor" href="#q5-总结下整体架构和代码目录" aria-label="Permalink to &quot;Q5：总结下整体架构和代码目录&quot;">​</a></h3><p><strong>A</strong>：最终智能体系统架构总结：</p><ol><li>整体架构：</li></ol><ul><li>前后端分离设计</li><li>后端：Go语言微服务架构</li><li>前端：Vue3单页应用</li><li>通信：REST API + WebSocket双协议</li><li>数据：PostgreSQL持久化存储</li></ul><ol><li>完整目录结构： /agent /cmd main.go # 服务入口 /internal /core # 智能体核心 /api # 接口层 /database # PostgreSQL操作 /websocket # 实时通信 /web # Vue3前端 /src /composables # 业务逻辑 /stores # Pinia状态 /views # 页面组件 /configs # 配置文件 go.mod # Go依赖 package.json # 前端依赖</li><li>技术栈：</li></ol><ul><li>后端: Go + pgx + Gorilla WebSocket</li><li>前端: Vue3 + Pinia + Element Plus</li><li>数据库: PostgreSQL + 迁移工具</li><li>基础设施: Docker容器化部署</li></ul><hr><h3 id="q6-并发用户约100人-还有没要修正的" tabindex="-1">Q6：并发用户约100人，还有没要修正的 <a class="header-anchor" href="#q6-并发用户约100人-还有没要修正的" aria-label="Permalink to &quot;Q6：并发用户约100人，还有没要修正的&quot;">​</a></h3><p><strong>A</strong>：针对100并发的架构优化方案：</p><p>扩展性增强：</p><ul><li>前端：Nginx负载均衡(多实例)</li><li>后端：Gin路由分组 + 连接池优化</li><li>WebSocket：Redis Pub/Sub实现集群通信</li><li>数据库：PgBouncer连接池(50-80连接数)</li></ul><p>性能优化点：</p><ul><li>添加Redis缓存层(减轻数据库压力)</li><li>实现请求限流(令牌桶算法)</li><li>引入pprof性能监控</li><li>日志异步写入(zerolog)</li></ul><p>监控方案：</p><ul><li>Prometheus指标收集</li><li>Grafana可视化面板</li><li>健康检查端点</li></ul><hr><h3 id="q7-前后端区分不同的工程目录" tabindex="-1">Q7：前后端区分不同的工程目录 <a class="header-anchor" href="#q7-前后端区分不同的工程目录" aria-label="Permalink to &quot;Q7：前后端区分不同的工程目录&quot;">​</a></h3><p><strong>A</strong>：调整后的工程目录结构：</p><p>完全分离的前后端工程：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/agent-backend   # Go后端工程</span></span>
<span class="line"><span>  /cmd</span></span>
<span class="line"><span>  /internal</span></span>
<span class="line"><span>    /core</span></span>
<span class="line"><span>    /api</span></span>
<span class="line"><span>    /database</span></span>
<span class="line"><span>  go.mod</span></span>
<span class="line"><span>  Dockerfile</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/agent-frontend  # Vue3前端工程</span></span>
<span class="line"><span>  /public</span></span>
<span class="line"><span>  /src</span></span>
<span class="line"><span>    /composables</span></span>
<span class="line"><span>    /stores</span></span>
<span class="line"><span>    /views</span></span>
<span class="line"><span>  package.json</span></span>
<span class="line"><span>  vite.config.js</span></span>
<span class="line"><span>  Dockerfile</span></span></code></pre></div><p>关键变更点：</p><ul><li>前后端完全独立代码库</li><li>各自独立的构建部署流程</li><li>通过API契约定义交互接口</li><li>开发时可独立运行(配置跨域)</li></ul><p>接口规范建议：</p><ul><li>使用OpenAPI 3.0定义REST接口</li><li>WebSocket协议文档化</li><li>版本化API路径(/api/v1/...)</li></ul><p>开发环境配置：</p><ul><li>后端：Air热重载</li><li>前端：Vite开发服务器</li><li>共享的.env环境变量</li></ul><hr><h3 id="q8-参照github规范-生成mit开源协议-docs等材料文件" tabindex="-1">Q8：参照github规范，生成MIT开源协议，docs等材料文件 <a class="header-anchor" href="#q8-参照github规范-生成mit开源协议-docs等材料文件" aria-label="Permalink to &quot;Q8：参照github规范，生成MIT开源协议，docs等材料文件&quot;">​</a></h3><p><strong>A</strong>：1. 需要按照GitHub规范创建开源项目文档 2. 必须包含的文件：</p><ul><li>LICENSE (MIT协议)</li><li>README.md (项目说明)</li><li>CONTRIBUTING.md (贡献指南)</li><li>docs/ (文档目录)</li></ul><ol start="3"><li>需要创建标准的项目文档结构</li></ol><hr><h3 id="q9-再总结下整体架构和代码目录" tabindex="-1">Q9：再总结下整体架构和代码目录 <a class="header-anchor" href="#q9-再总结下整体架构和代码目录" aria-label="Permalink to &quot;Q9：再总结下整体架构和代码目录&quot;">​</a></h3><p><strong>A</strong>：最终智能体系统架构总结（优化版）：</p><ol><li>整体架构设计：</li></ol><ul><li>前后端完全分离工程</li><li>微服务架构设计</li><li>支持100+并发用户</li><li>容器化部署方案</li></ul><ol start="2"><li>工程目录结构：</li></ol><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/agent-backend/          # Go后端服务</span></span>
<span class="line"><span>     ├── cmd/               # 启动入口</span></span>
<span class="line"><span>     ├── internal/          # 核心逻辑</span></span>
<span class="line"><span>     │   ├── core/          # 智能体引擎</span></span>
<span class="line"><span>     │   ├── api/           # 接口层</span></span>
<span class="line"><span>     │   ├── database/      # PostgreSQL操作</span></span>
<span class="line"><span>     │   └── websocket/     # 实时通信</span></span>
<span class="line"><span>     ├── configs/           # 配置文件</span></span>
<span class="line"><span>     ├── go.mod             # 依赖管理</span></span>
<span class="line"><span>     └── Dockerfile</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/agent-frontend/         # Vue3前端</span></span>
<span class="line"><span>  ├── public/            # 静态资源</span></span>
<span class="line"><span>  ├── src/               # 源代码</span></span>
<span class="line"><span>  │   ├── assets/        # 静态资源</span></span>
<span class="line"><span>  │   ├── composables/   # 组合式函数</span></span>
<span class="line"><span>  │   ├── stores/        # Pinia状态</span></span>
<span class="line"><span>  │   └── views/         # 页面组件</span></span>
<span class="line"><span>  ├── package.json       # 前端依赖</span></span>
<span class="line"><span>  └── vite.config.js</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/docs/                   # 项目文档</span></span>
<span class="line"><span>  ├── API.md            # API接口文档</span></span>
<span class="line"><span>  ├── ARCHITECTURE.md   # 架构设计</span></span>
<span class="line"><span>  └── DEPLOYMENT.md     # 部署指南</span></span></code></pre></div><ol start="3"><li>关键特性：</li></ol><ul><li>前后端独立开发部署</li><li>PostgreSQL+Redis数据层</li><li>WebSocket实时通信</li><li>完善的监控体系</li><li>完整的开源文档</li></ul><hr><p>问到这里后，提示是否 需要生成架构图或详细设计文档，生成看看。</p><p>点击查看：<a href="/shared/agentdesign">智能体系统架构设计文档</a></p><p>到此我们开始尝试生成相关代码。</p><h3 id="q10-请根据总结的整体架构和代码目录-请创建相关工程和代码" tabindex="-1">Q10：请根据总结的整体架构和代码目录，请创建相关工程和代码 <a class="header-anchor" href="#q10-请根据总结的整体架构和代码目录-请创建相关工程和代码" aria-label="Permalink to &quot;Q10：请根据总结的整体架构和代码目录，请创建相关工程和代码&quot;">​</a></h3><p><strong>A</strong>：运行命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-backend/cmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-backend/internal/core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-backend/internal/api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-backend/internal/database</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-backend/configs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-frontend/src/composables</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-frontend/src/stores</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-frontend/src/views</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-backend/go.mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-backend/main.go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> agent-frontend/package.json</span></span></code></pre></div><p>后续命令众多，就不贴出来了，结论如下：</p><p>智能体系统开发已完成，包含以下组件：</p><p><strong>任务完成</strong></p><p>智能体系统开发已完成，包含以下组件：</p><p>后端服务 (Go)</p><ul><li>基础API框架 (Gin)</li><li>健康检查端点 (/health)</li><li>服务状态端点 (/api/v1/status)</li><li>运行在 :8080 端口</li></ul><p>前端应用 (Vue3)</p><ul><li>使用Element Plus组件库</li><li>包含首页和聊天界面</li><li>已配置路由导航</li><li>模拟聊天功能</li></ul><p>项目结构</p><ul><li>前后端完全分离</li><li>标准目录结构</li><li>完整文档(ARCHITECTURE.md)</li></ul><p>访问方式：</p><ol><li>后端API: <a href="http://localhost:8080/" target="_blank" rel="noreferrer">http://localhost:8080</a></li><li>前端应用: <a href="http://localhost:3000/" target="_blank" rel="noreferrer">http://localhost:3000</a></li></ol><p>下一步建议：</p><ol><li>实现WebSocket实时通信</li><li>连接PostgreSQL数据库</li><li>添加用户认证功能</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>尝试了下链接，还需要不断往下，一步一个脚印的提问，总体感觉相当快，就是需要不断审视。</p><p>看了生成的代码，虽说有点瑕疵，但是这样的成果工作量起码一周了，现在2个小时。点赞。</p><p><img src="`+p+'" alt="image-20250530115843626"></p>',104)]))}const k=s(e,[["render",t]]);export{u as __pageData,k as default};
